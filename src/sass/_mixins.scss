@mixin button-style($border-color: null, $bg-color: null, $color: null, $hover-border-color: null, $hover-bg-color: null, $hover-color: null, $active-border-color: null, $active-bg-color: null, $active-color: null) {
	@if ($border-color) { border-color: $border-color;}
	@if ($bg-color) { background-color: $bg-color;}
	@if ($color) { color: $color;}
	
	&:hover {
		@if ($hover-border-color) { border-color: $hover-border-color; }
		@if ($hover-bg-color) { background-color: $hover-bg-color; }
		@if ($hover-color) { color: $hover-color; }
		text-decoration: none;
	}
	// removed focus state because it causes the button to stay selected
	&:active {
		@if ($active-border-color) { border-color: $active-border-color; }
		@if ($active-bg-color) { background-color: $active-bg-color; }
		@if ($active-color) { color: $active-color; }
		//box-shadow: inset 0 1px 4px rgba(0,0,0,0.1);
	}
}


// positioning elements/
@mixin place($pos:null, $a:0, $b:0, $c:null, $d:null) {
	@if ($pos) { position: $pos; }
	@else { position: static; }
	
	top:$a;
	right:$b;
	// @if ($a) { top:$a; }
	// @if ($b) { right:$b; }
	@if ($c) { bottom:$c; }
	@if ($d) { left:$d; }
}


// Placeholder color mixin
@mixin placeholder-color($color) {
	&::-webkit-input-placeholder {
		color: $color
	}
	&:-moz-placeholder {
		color: $color
	}
	&::-moz-placeholder{
		color: $color
	}
	&:-ms-input-placeholder{
		color: $color
	}
}

// Mixin image
@mixin background-image($img) {
	background-image: url(image-path($img));
	background-repeat: repeat;
}

// Box sizing
@mixin box-sizing($boxmodel) {
	-webkit-box-sizing: $boxmodel;
		 -moz-box-sizing: $boxmodel;
					box-sizing: $boxmodel;
}

// soon will be unnecessary
@mixin box-shadow($shadow...) {
	-webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
					box-shadow: $shadow;
}

// In case is not supported by some browsers use these properties
// -moz-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale")
// -o-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale")
// -webkit-filter: grayscale(100%)
// filter: gray
// filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale")

@mixin desaturate {
	filter: gray;
	filter: grayscale(1);
	-webkit-filter: grayscale(1);
}

@mixin saturate {
	filter: none;
	-webkit-filter: grayscale(0);
}

// @mixin buttonsize($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
//   padding: $padding-vertical $padding-horizontal;
//   font-size: $font-size;
//   line-height: $line-height;
//   border-radius: $border-radius;
// }

@mixin user-select($select) {
	-webkit-user-select: $select;
	-moz-user-select: $select;
	-ms-user-select: $select;
	user-select: $select;
}

// @mixin navbar-vertical-align($element-height) {
//   margin-top: ($navbar-height - $element-height) / 2;
//   margin-bottom: ($navbar-height - $element-height) / 2;
// }


// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`

@mixin backface-visibility($visibility) {
	-webkit-backface-visibility: $visibility;
		 -moz-backface-visibility: $visibility;
					backface-visibility: $visibility;
}

@mixin perspective($perspective) {
	-webkit-perspective: $perspective;
		 -moz-perspective: $perspective;
					perspective: $perspective;
}
@mixin perspective-origin($perspective) {
	-webkit-perspective-origin: $perspective;
		 -moz-perspective-origin: $perspective;
					perspective-origin: $perspective;
}
@mixin transform-origin($origin) {
	-webkit-transform-origin: $origin;
		 -moz-transform-origin: $origin;
			-ms-transform-origin: $origin; // IE9 only
					transform-origin: $origin;
}
@mixin translate3d($x, $y, $z) {
	-webkit-transform: translate3d($x, $y, $z);
					transform: translate3d($x, $y, $z);
}

// Reset the box-sizing
//
// Heads up! This reset may cause conflicts with some third-party widgets.
// For recommendations on resolving such conflicts, see
// http://getbootstrap.com/getting-started/#third-box-sizing
// * {
//   @include box-sizing(border-box);
// }
// *:before,
// *:after {
//   @include box-sizing(border-box);
// }

// Center-align a block level element
@mixin center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// clearfix
@mixin clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}

.clearfix {
	@include clearfix;
}
.center-block {
	@include center-block;
}


// Toggling content
// -------------------------

// Hide from screenreaders and browsers
//
// Credit: HTML5 Boilerplate

// .hidden { display: none !important; }
// .text-left           { text-align: left; }
// .text-right          { text-align: right; }
// .text-center         { text-align: center; }
// .text-justify        { text-align: justify; }
// .text-nowrap         { white-space: nowrap; }


// Mixin for creating animations using single or "all" property transitions
// @include transition(PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION)
// @mixin transition($transition) {
//  -webkit-transition: $transition;
//  -moz-transition: $transition;
//  -ms-transition: $transition;
//  -o-transition: $transition;
//  transition: $transition;
// }

// Mixin for creating animations using multiple property transitions
// @include multi-transition("PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION, PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION")
// @mixin multi-transition($transition) {
//  -webkit-transition: #{$transition};
//  -moz-transition: #{$transition};
//  -ms-transition: #{$transition};
//  -o-transition: #{$transition};
//  transition: #{$transition};
// }



// other rinteresting shit.

// generic transform
// +transform(scale(1.2))
@mixin transform($transforms) {
		 -moz-transform: $transforms;
			 -o-transform: $transforms;
			-ms-transform: $transforms;
	-webkit-transform: $transforms;
					transform: $transforms;
}

// rotate
// @mixin rotate ($deg) {
//   @include transform(rotate(#{$deg}deg));
// }
 
// // scale
// @mixin scale($scale) {
//   @include transform(scale($scale));
// } 
// // translate
// @mixin translate ($x, $y) {
//    @include transform(translate($x, $y));
// }
// // skew
// @mixin skew ($x, $y) {
//    @include transform(skew(#{$x}deg, #{$y}deg));
// }

//transform origin
@mixin transform-origin ($origin) {
		moz-transform-origin: $origin;
			 -o-transform-origin: $origin;
			-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
					transform-origin: $origin;
}


// .test {
//  @include skew(25,10);
//  @include transform-origin(top left);
//  position: absolute;
//  top: 25%;
//  bottom: 25%;
//  left: 25%;
//  right: 25%;
//  background-color: rgba(20,20,20,.5);
// }



//animation mixin experiment
// http://joshbroton.com/quick-fix-sass-mixins-for-css-keyframe-animations/
// ------------------------
// .element {
//   animation-name: stretch;
//   animation-duration: 1.5s; 
//   animation-timing-function: ease-out; 
//   animation-delay: 0;
//   animation-direction: alternate;
//   animation-iteration-count: infinite;
//   animation-fill-mode: none;
//   animation-play-state: running; 
// }
// ------------------------

@mixin animation($animate...) {
		$max: length($animate);
		$animations: '';

		@for $i from 1 through $max {
				$animations: #{$animations + nth($animate, $i)};

				@if $i < $max {
						$animations: #{$animations + ", "};
				}
		}
		-webkit-animation: $animations;
		-moz-animation:    $animations;
		-o-animation:      $animations;
		animation:         $animations;
}

@mixin keyframes($animationName) {
		@-webkit-keyframes #{$animationName} {
				@content;
		}
		@-moz-keyframes #{$animationName} {
				@content;
		}
		@-o-keyframes #{$animationName} {
				@content;
		}
		@keyframes #{$animationName} {
				@content;
		}
}

// =animation($name, $time, $type)
//  -webkit-animation: $name $time $type //ease-out
//  -moz-animation: $name $time $type //ease-out
//  animation: $name $time $type //ease-out

// =animation-iteration-count($times: infinite)
//  -webkit-animation-iteration-count: $times
//  -moz-animation-iteration-count: $times
//  animation-iteration-count: $times
// =animation($name, $time, $type)
//  -webkit-animation: $name $time $type //ease-out
//  -moz-animation: $name $time $type //ease-out
//  animation: $name $time $type //ease-out
// =animation-iteration-count($times: infinite)
//  -webkit-animation-iteration-count: $times
//  -moz-animation-iteration-count: $times
//  animation-iteration-count: $times

// HACK THE SELECTION THINGY
// -------------------------
$prefixes: ("-moz-", "-webkit-", "-ms-", "");
@mixin selection($color, $background) {
		@each $prefix in $prefixes {
				::#{$prefix}selection {
						color: $color;
						background: $background;
				}
		}
}
// -------------

@mixin animation-delay($t) {
	-webkit-animation-delay: $t;
	-moz-animation-delay: $t;
	-o-animation-delay: $t;
	-ms-animation-delay: $t;
	animation-delay: $t;
}

@mixin rotate( $val: -2deg ) {
	-webkit-transform: rotate($val);
	-moz-transform: rotate($val);
	-ms-transform: rotate($val);
	-o-transform: rotate($val);
	transform: rotate($val);
}


@mixin stretch($a:0,$b:0,$c:0,$d:0) {
	position: absolute;
	top:$a;
	left:$b;
	right:$c;
	bottom:$d;
}

// mixin font
@mixin lefont ($somefont) {
	@font-face {
		font-family: $somefont;
		// src: font-url($somefont + '.eot'); /* IE9 Compat Modes */
		src: 
			font-url($somefont + '.eot') format('embedded-opentype'), /* IE6-IE8 */
			font-url($somefont + '.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
			
			// things are shifting rapidly towards WOFF and WOFF2 so we might get away with this 2 only:
			font-url($somefont + '.woff2') format('woff2'), /* Super Modern Browsers */ 
			font-url($somefont + '.woff') format('woff'), /* Pretty Modern Browsers */
			font-url($somefont + '.ttf') format('truetype'), /* Safari, Android, iOS */
			// font-url($somefont + '.svg#' + $somefont) format('svg'); /* Legacy iOS */
	} 
}

@mixin font-smoothing() {
	// auto / never / always
	font-smooth: auto;
	// none  / subpixel-antialiased / antialiased
	-webkit-font-smoothing: antialiased;
	// auto / inherit / unset / grayscale
	-moz-osx-font-smoothing: grayscale;
}

// WebKit-style focus

@mixin tab-focus() {
	// Default
	outline: thin dotted;
	// WebKit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}


@mixin hover {
	@if $enable-hover-media-query {
		// See Media Queries Level 4: http://drafts.csswg.org/mediaqueries/#hover
		// Currently shimmed by https://github.com/twbs/mq4-hover-shim
		@media (hover: hover) {
			&:hover { @content }
		}
	}
	@else {
		&:hover { @content }
	}
}

@mixin hover-focus {
	@if $enable-hover-media-query {
		&:focus { @content }
		@include hover { @content }
	}
	@else {
		&:focus,
		&:hover {
			@content
		}
	}
}

@mixin plain-hover-focus {
	@if $enable-hover-media-query {
		&,
		&:focus {
			@content
		}
		@include hover { @content }
	}
	@else {
		&,
		&:focus,
		&:hover {
			@content
		}
	}
}

@mixin hover-focus-active {
	@if $enable-hover-media-query {
		&:focus,
		&:active {
			@content
		}
		@include hover { @content }
	}
	@else {
		&:focus,
		&:active,
		&:hover {
			@content
		}
	}
}

// Sizing shortcuts

@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin square($w) {
	width: $w;
	height: $w;
}

// Transitions

@mixin transition($transition...) {
	-webkit-transition: $transition;
			 -o-transition: $transition;
					transition: $transition;
}
@mixin transition-property($transition-property...) {
	-webkit-transition-property: $transition-property;
					transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
	-webkit-transition-delay: $transition-delay;
					transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
	-webkit-transition-duration: $transition-duration;
					transition-duration: $transition-duration;
}
@mixin transition-timing-function($timing-function) {
	-webkit-transition-timing-function: $timing-function;
					transition-timing-function: $timing-function;
}
@mixin transition-transform($transition...) {
	-webkit-transition: -webkit-transform $transition;
		 -moz-transition: -moz-transform $transition;
			 -o-transition: -o-transform $transition;
					transition: transform $transition;
}

// Gradients
/**
 * @description
 * This mixin creates (endless) multiple color stops in gradients just with one
 * call for the mixin.
 *
 * @author drublic
 *
 * @link caniuse http://caniuse.com/css-gradients
 * @link spec http://www.w3.org/TR/2011/WD-css3-images-20110217/#linear-gradients
 *
 * @param stops {list}
 * @returns
 *   background-image: -webkit-linear-gradient(top, <stops[1]>, <stops[2]>, ..., <stops[n]>);
 *   background-image:         linear-gradient(to bottom, <stops[1]>, <stops[2]>, ..., <stops[n]>);
 *
 * @example
 *   .selector {
 *     @include x-multiple-colored-gradient(
 *         "top",
 *         #f22 0%,
 *         #f2f 15%,
 *         #22f 30%,
 *         #2ff 45%,
 *         #2f2 60%,
 *         #2f2 75%,
 *         #ff2 90%,
 *         #f22 100%
 *     );
 *   }
 *
 * Note: This mixis does not define a fallback-color for your background as it
 * is likely you want to add an image or something. Please specify one by
 * yourself.
 */

@mixin x-multiple-colored-gradient($args...) {
	$gradient: ();
	$pos: nth($args, 1);
	$pos_newsyntax: ();

	@if not is-valid-keyword-direction($pos) {
		$pos: 'top';
	}

	// New Syntax
	@if $pos == 'top' {
		$pos_newsyntax: 'to bottom';
	} @else if $pos == 'right' {
		$pos_newsyntax: 'to left';
	} @else if $pos == 'bottom' {
		$pos_newsyntax: 'to top';
	} @else if $pos == 'left' {
		$pos_newsyntax: 'to right';
	}

	@each $g in $args {
		@if not is-valid-keyword-direction($g) {
			$gradient: append($gradient, $g, comma);
		}
	}

	background-image: -webkit-linear-gradient(unquote($pos), $gradient);
	background-image:         linear-gradient(unquote($pos_newsyntax), $gradient);
}

/*
	* Returns whether a value is a valid keyword direction
	*
	* @param value {String}
	* @returns
	*   <Bool>
	*/
@function is-valid-keyword-direction($value) {
	@return not not index(
		'top' 'right' 'bottom' 'left'
		'to top' 'to right' 'to bottom' 'to left'
		'to top right' 'to right top'
		'to bottom right' 'to right bottom'
		'to top left' 'to left top'
		'to bottom left' 'to left bottom', $value);
}


// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
	background-repeat: repeat-x;
	background-image: linear-gradient($deg, $start-color, $end-color);
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
	background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
	background-repeat: no-repeat;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
	background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
	background-repeat: no-repeat;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 gets no color-stop at all for proper fallback
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
	background-image: radial-gradient(circle, $inner-color, $outer-color);
	background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
	background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

// Aspect radio ---------- //
@mixin aspect-ratio($width, $height) {
	position: relative;
	&:before {
		display: block;
		content: "";
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}
	> .content {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}